use intern::{self, InternedString};
use repr::*;

grammar<'parse, 'arena>(arena: &'parse mut Arena<'arena>);

pub Func: Func<'arena> = {
    <blocks:BasicBlockData+> => Func {
        data: blocks.into_iter()
                    .map(|block| (block.name, block))
                    .collect(),
    }
};

BasicBlockData: BasicBlockData<'arena> = {
    Comment* "block" <name:BasicBlock> "{"
        <actions:Action*>
        <gotos:("goto" <BasicBlock*> ";")?>
    "}" => {
        BasicBlockData {
            name: name,
            actions: actions,
            successors: gotos.unwrap_or(vec![]),
        }
    }
};

BasicBlock: BasicBlock = {
    Ident => BasicBlock(<>)
};

Action: Action<'arena> = {
    <a:Region> "<=" <b:Region> ";" => Action::Subregion(a, b),
    <a:Region> "==" <b:Region> ";" => Action::Eqregion(a, b),
    "*" <r:Region> ";" => Action::Deref(r),
};

Ident: InternedString = {
    r"[a-zA-Z_]\w*" => intern::intern(<>)
};

Region: Region<'arena> = {
    RegionData => arena.intern(<>),
};

RegionData: RegionData = {
    "{" <entry:BasicBlock> "->" <exits:Comma<RegionExit>> "}" => RegionData {
        entry: entry,
        exits: exits,
    }
};

RegionExit: RegionExit = {
    "'" <Ident> => RegionExit::Parameter(<>),
    BasicBlock => RegionExit::Block(<>),
};

Comma<T>: Vec<T> = {
    <Comma1<T>> ","?
};

Comma1<T>: Vec<T> = {
    T => vec![<>],
    <v:Comma1<T>> "," <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Comment: () = {
    r"//.*" => ()
};
