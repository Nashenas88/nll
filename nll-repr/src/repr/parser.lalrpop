use intern::{self, InternedString};
use repr::*;
use std::str::FromStr;

grammar;

pub Func: Func = {
    <structs:StructDecl*>
        <decls:VarDecl*>
        <blocks:BasicBlockData+>
        <asserts:(Comment* <Assertion>)*> =>
    {
        Func {
            structs: structs,
            decls: decls,
            data: blocks.into_iter()
                        .map(|block| (block.name, block))
                        .collect(),
            assertions: asserts,
        }
    }
};

StructDecl: StructDecl = {
    Comment* "struct" <n:StructName> "<" <p:Comma<StructParameter>> ">" ";" => {
        StructDecl {
            name: n,
            parameters: p,
        }
    }
};

StructParameter: StructParameter = {
    "'+" => StructParameter { kind: Kind::Region, variance: Variance::Co },
    "'-" => StructParameter { kind: Kind::Region, variance: Variance::Contra },
    "'=" => StructParameter { kind: Kind::Region, variance: Variance::In },
    "+" => StructParameter { kind: Kind::Type, variance: Variance::Co },
    "-" => StructParameter { kind: Kind::Type, variance: Variance::Contra },
    "=" => StructParameter { kind: Kind::Type, variance: Variance::In },
};

VarDecl: VariableDecl = {
    Comment* "let" <n:Variable> ":" <t:Ty> ";" => VariableDecl {
        var: n,
        ty: t,
    }
};

Ty: Box<Ty> = {
    "&" <RegionName> "mut" <Ty> => Box::new(Ty::RefMut(<>)),
    "&" <RegionName> <Ty> => Box::new(Ty::Ref(<>)),
    "(" ")" => Box::new(Ty::Unit),
    <StructName> "<" <Comma<TyParameter>> ">" => Box::new(Ty::Struct(<>)),
};

TyParameter: TyParameter = {
    RegionName => TyParameter::Region(<>),
    Ty => TyParameter::Ty(<>),
};

BasicBlockData: BasicBlockData = {
    Comment* "block" <name:BasicBlock> "{"
        <actions:Action*>
        <gotos:("goto" <BasicBlock*> ";")?>
    "}" => {
        BasicBlockData {
            name: name,
            actions: actions,
            successors: gotos.unwrap_or(vec![]),
        }
    }
};

Action: Action = {
    <a:Path> "=" "use" "(" <p:Comma0<Path>> ")" ";" Comment? => Action::Init(a, p),
    <a:Path> "=" "&" <r:RegionName> ";" Comment? => Action::Borrow(a, r),
    <a:Path> "=" <b:Path> ";" Comment? => Action::Assign(a, b),
    <c:Constraint> ";" Comment? => Action::Constraint(c),
    "use" "(" <v:Path> ")" ";" Comment? => Action::Use(v),
    "write" "(" <v:Path> ")" ";" Comment? => Action::Write(v),
    ";" Comment? => Action::Noop,
};

Path: Box<Path> = {
    Variable => Box::new(Path::Base(<>)),
    <Path> ":" <Usize> => Box::new(Path::Extension(<>)),
};

Constraint: Box<Constraint> = {
    Constraint1 => Box::new(<>),
};

Constraint1: Constraint = {
    "forall" "<" <v:Comma<RegionName>> ">" <c:Constraint> => Constraint::ForAll(v, c),
    "exists" "<" <v:Comma<RegionName>> ">" <c:Constraint> => Constraint::Exists(v, c),
    "if" "(" <v:Comma<OutlivesConstraint>> ")" <c:Constraint> => Constraint::Implies(v, c),
    "{" <c:Comma<Constraint1>> "}" => Constraint::All(c),
    OutlivesConstraint => Constraint::Outlives(<>),
};

OutlivesConstraint: OutlivesConstraint = {
    <sup:RegionName> ":" <sub:RegionName> => OutlivesConstraint { sup, sub },
};

Variable: Variable = {
    <n:Ident> => Variable { name: n }
};

Assertion: Assertion = {
    "assert" <n:RegionName> "==" <r:Region> ";" => Assertion::Eq(n, r),
    "assert" <p:Point> "in" <n:RegionName> ";" => Assertion::In(n, p),
    "assert" <p:Point> "not" "in" <n:RegionName> ";" => Assertion::NotIn(n, p),
    "assert" <v:Variable> "live" "at" <b:BasicBlock> ";" => Assertion::Live(v, b),
    "assert" <v:Variable> "not" "live" "at" <b:BasicBlock> ";" => Assertion::NotLive(v, b),
};

RegionName: RegionName = {
    r"'[a-zA-Z_]\w*" => RegionName { name: intern::intern(<>) }
};

StructName: StructName = {
    r"[a-zA-Z_]\w*" => StructName { name: intern::intern(<>) }
};

Point: Point = {
    <b:BasicBlock> "/" <a:Usize> => Point { block: b, action: a }
};

Region: Region = {
    "{" <p:Comma<Point>> "}" => Region { points: p },
};

Usize: usize = {
    r"[0-9]+" => usize::from_str(<>).unwrap()
};

BasicBlock: BasicBlock = {
    Ident => BasicBlock(<>)
};

Ident: InternedString = {
    r"[a-zA-Z_]\w*" => intern::intern(<>)
};

Comma<T>: Vec<T> = {
    <Comma1<T>> ","?
};

Comma0<T>: Vec<T> = {
    <v:Comma<T>?> => v.unwrap_or(vec![])
};

Comma1<T>: Vec<T> = {
    T => vec![<>],
    <v:Comma1<T>> "," <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Comment: () = {
    r"//.*" => ()
};
