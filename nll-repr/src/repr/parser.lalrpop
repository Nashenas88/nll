use intern::{self, InternedString};
use repr::*;
use std::str::FromStr;

grammar<'parse, 'arena>(arena: &'parse mut Arena<'arena>);

pub Func: Func<'arena> = {
    <blocks:BasicBlockData+> <assertions:Assertion*> => Func {
        data: blocks.into_iter()
                    .map(|block| (block.name, block))
                    .collect(),
        assertions: assertions,
    }
};

BasicBlockData: BasicBlockData<'arena> = {
    Comment* "block" <name:BasicBlock> "{"
        <actions:Action*>
        <gotos:("goto" <BasicBlock*> ";")?>
    "}" => {
        BasicBlockData {
            name: name,
            actions: actions,
            successors: gotos.unwrap_or(vec![]),
        }
    }
};

Assertion: Assertion<'arena> = {
    "assert" <a:Region> "=" <b:Region> ";" => {
        Assertion::RegionEq(a, b)
    },

    "assert" <p:Point> "in" <b:Region> ";" => {
        Assertion::RegionContains(b, p)
    },

    "assert" <p:Point> "not" "in" <b:Region> ";" => {
        Assertion::RegionNotContains(b, p)
    },
};

BasicBlock: BasicBlock = {
    Ident => BasicBlock(<>)
};

Action: Action<'arena> = {
    <a:Region> "<=" <b:Region> ";" Comment? => Action::Subregion(a, b),
    "*" <r:RegionVariable> ";" Comment? => Action::Deref(r),
    ";" => Action::Noop,
};

Ident: InternedString = {
    r"[a-zA-Z_]\w*" => intern::intern(<>)
};

Region: Region<'arena> = {
    RegionData => arena.intern(<>),
};

RegionData: RegionData = {
    <v:RegionVariable> => RegionData::Variable(v),
    "{" <BasicBlock> "->" <Comma0<Point>> "}" => RegionData::Literal(<>),
};

RegionVariable: RegionVariable = {
    "$" <name:Ident> => RegionVariable(name),
};

Point: Point = {
    <b:BasicBlock> "/" <a:r"[0-9]+"> =>
        Point { block: b, action: usize::from_str(a).unwrap() },
};

Comma<T>: Vec<T> = {
    <Comma1<T>> ","?
};

Comma0<T>: Vec<T> = {
    <v:Comma<T>?> => v.unwrap_or(vec![])
};

Comma1<T>: Vec<T> = {
    T => vec![<>],
    <v:Comma1<T>> "," <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Comment: () = {
    r"//.*" => ()
};
