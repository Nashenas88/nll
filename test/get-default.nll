let m;
let r;
let return;

block START {
    goto M_START;
}

block M_START {
    goto START;
}

block START {
    m = &; // (&map).get_mut();
    r = m; // lifetime of return value linked to input
    goto SOME NONE;
}

block SOME {
    return = r;
    goto END;
}

block NONE {
    ; // map.insert(...);
    m = &; // (&map).get_mut()
    r = m; // lifetime of return value linked to input
    return = r; // returned
    goto END;
}

block END {
    goto M_END;
}

// represents the end of the lifetime 'm
block M_END {
    use(return);
}

// Scope of first borrow.
assert r@START/1.0 == { END/0, M_END/0, SOME/0, SOME/1, START/1, START/2 };

// Notably it does not include the NONE arm.
assert NONE/0 not in r@START/1.0;

// Scope of second borrow.
assert r@NONE/2.0 == { END/0, M_END/0, NONE/2, NONE/3, NONE/4 };

