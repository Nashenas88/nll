let v: &'v;
let p: &'p;

block START {
    v = &'vec;    // let v: Vec<&i32> = vec![];
    p = &'foo;    // let p = &foo;
    goto B C;
}

block B {
    'v <= 'p; // v.push(p); implies p <: vec-elem implies 'v <= 'p
    use(p); // part of v.push(p)
    use(v); // also here
    goto EXIT;
}

block C {
    ; // key point: foo not borrowed here
    use(v);
    goto EXIT;
}

block EXIT {
}

assert B/0 in 'foo;
assert B/1 in 'foo;
assert B/2 in 'foo;
assert C/0 not in 'foo;

assert v not live at START;
assert v live at B;
assert v live at C;
assert v not live at START;

assert p not live at START;
assert p live at B;
assert p not live at C;
assert p not live at EXIT;

